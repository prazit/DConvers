package com.clevel.dconvers.ngin.format;

import com.clevel.dconvers.Application;
import com.clevel.dconvers.conf.OutputConfig;
import com.clevel.dconvers.conf.Property;
import com.clevel.dconvers.conf.SystemVariable;
import com.clevel.dconvers.ngin.Converter;
import com.clevel.dconvers.ngin.Source;
import com.clevel.dconvers.ngin.data.DataColumn;
import com.clevel.dconvers.ngin.data.DataRow;
import com.clevel.dconvers.ngin.data.DataTable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Types;

public class ConverterTargetFormatter extends DataFormatter {

    private String targets;

    private String eol;
    private String doubleEOL;
    private String eof;

    private String nowString;
    private String converterName;
    private int targetIndex;

    private boolean forSource;
    private boolean forName;

    public ConverterTargetFormatter(Application application, String name, OutputConfig outputConfig) {
        super(application, name, false);

        targetIndex = 0;

        forSource = outputConfig.isTarForSource();
        forName = outputConfig.isTarForName();
        this.eol = outputConfig.getTarOutputEOL();
        this.eof = outputConfig.getTarOutputEOF();
        doubleEOL = eol + eol;

        nowString = application.systemVariableMap.get(SystemVariable.NOW).getValue();

        targets = eol;
    }

    @Override
    protected String preFormat(DataTable dataTable) {
        Converter converter = application.currentConverter;
        converterName = converter.getName();

        if (forSource) {
            for (Source source : converter.getSourceList()) {
                generateTargetFor(source.getDataTable());
            }
        } else {
            generateTargetFor(dataTable);
        }

        return targets + eof;
    }

    @Override
    public String format(DataRow row) {
        return null;
    }

    /**
     * Generate one target for source datatable.
     */
    protected boolean generateTargetFor(DataTable dataTable) {
        String tableName = dataTable.getName();
        if (dataTable.getRowCount() == 0) {
            log.warn("ConverterTargetFormatter.generateTargetFor. source({}) does't have column prototype to generate target configuration!", tableName);
            application.hasWarning = true;
            return true;
        }

        targetIndex++;
        int columnCount = dataTable.getRow(0).getColumnCount();
        String name;
        int type;
        String value;
        String id = dataTable.getIdColumnName();

        String targetKey = Property.TARGET.connectKey(tableName);
        targets += eol + "#------- TAR:" + tableName + " -------"
                + doubleEOL + "# generated by DConvers @" + nowString + eol
                + "# " + columnCount + " columns from source(" + tableName + ") in converter(" + converterName + ")" + eol
                + Property.TARGET.key() + "=" + tableName + eol
                + targetKey + "." + Property.INDEX.key() + "=" + String.valueOf(targetIndex) + eol
                + targetKey + "." + Property.SOURCE.key() + "=" + tableName + eol
                + targetKey + "." + Property.ROW_NUMBER.key() + "=1" + eol
                + targetKey + "." + Property.ID.key() + "=" + id + doubleEOL;

        String columnKey = targetKey + ".column.";
        for (DataColumn column : dataTable.getRow(0).getColumnList()) {
            name = column.getName();
            type = column.getType();
            if (forName) {
                value = name;
            } else if (id.equals(name)) {
                value = "VAR:ROW_NUMBER";
            } else {
                value = getDefaultValue(type);
            }
            targets += columnKey + name + "=" + value + eol;
        }

        targets += eol + targetKey + "." + Property.MARKDOWN.key() + "=true" + eol
                + targetKey + "." + Property.MARKDOWN.connectKey(Property.OUTPUT_FILE) + "=output/$[VAR:TARGET_FILE_NUMBER]_$[CAL:NAME(CURRENT)].md" + eol;

        return true;
    }

    private String getDefaultValue(int columnType) {
        switch (columnType) {
            case Types.BIGINT:
            case Types.INTEGER:
                return "INT:0";

            case Types.DECIMAL:
                return "DEC:0.0";

            case Types.DATE:
            case Types.TIMESTAMP:
                return "DTE:NULL";

            default: // Types.VARCHAR:
                return "STR:NULL";
        }
    }

    @Override
    protected Logger loadLogger() {
        return LoggerFactory.getLogger(ConverterTargetFormatter.class);
    }
}
