package com.clevel.dconvers.ngin.format;

import com.clevel.dconvers.Application;
import com.clevel.dconvers.conf.OutputConfig;
import com.clevel.dconvers.conf.Property;
import com.clevel.dconvers.conf.SystemVariable;
import com.clevel.dconvers.ngin.data.DataColumn;
import com.clevel.dconvers.ngin.data.DataRow;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConverterSourceFormatter extends DataFormatter {

    private String eol;
    private String eof;
    private String doubleEOL;
    private String owner;
    private String table;
    private String id;
    private String dataSource;
    private String[] outputTypes;
    private int sourceIndex;
    private String nowString;
    private boolean isFirstRow;

    public ConverterSourceFormatter(Application application, String name, OutputConfig outputConfig) {
        super(application, name, true);

        eol = outputConfig.getSrcOutputEOL();
        eof = outputConfig.getSrcOutputEOF();
        doubleEOL = eol + eol;

        owner = outputConfig.getSrcOwner();
        table = outputConfig.getSrcTable();
        id = outputConfig.getSrcId();
        dataSource = outputConfig.getSrcDataSource();
        outputTypes = outputConfig.getSrcOutputs().split("[,]");
        sourceIndex = 0;
        isFirstRow = true;

        nowString = application.systemVariableMap.get(SystemVariable.NOW).getValue();
    }

    @Override
    public String format(DataRow row) {
        sourceIndex++;
        String ownerName = getColumnString(row, owner);
        String tableName = getColumnString(row, table);
        String idColumnName = getColumnString(row, id);
        String query = "SELECT * FROM " + ownerName + "." + tableName + " ORDER BY " + idColumnName;

        String sourceName = ownerName + "_" + tableName;
        String sourceKey = Property.SOURCE.connectKey(sourceName);

        String generated = eol + "#------- SRC:" + sourceName + "-------" + doubleEOL
                + "# generated by DConvers @" + nowString + eol
                + Property.SOURCE.key() + "=" + sourceName + eol
                + sourceKey + "." + Property.INDEX.key() + "=" + String.valueOf(sourceIndex) + eol
                + sourceKey + "." + Property.DATA_SOURCE.key() + "=" + dataSource + eol
                + sourceKey + "." + Property.QUERY.key() + "=" + query + eol
                + sourceKey + "." + Property.ID.key() + "=" + idColumnName + doubleEOL;

        for (String outputType : outputTypes) {
            generated += sourceKey + "." + outputType + "=true" + eol;
        }

        if (isFirstRow) {
            sourceKey += ".tar";
            generated += eol + "# To generate target for all tables in current converter" + eol
                    + sourceKey + "=true" + eol
                    + "#" + sourceKey + "." + Property.OUTPUT_FILE.key() + "=<replace-this-by-output-file-name>" + eol
                    + sourceKey + "." + Property.OUTPUT_TYPES.key() + "=sql,markdown" + eol;
        }
        isFirstRow = false;

        return generated + eol;
    }

    private String getColumnString(DataRow row, String columnName) {
        DataColumn dataColumn = row.getColumn(columnName);
        if (dataColumn == null) {
            return "";
        }
        return dataColumn.getValue();
    }

    @Override
    protected Logger loadLogger() {
        return LoggerFactory.getLogger(ConverterSourceFormatter.class);
    }

}
