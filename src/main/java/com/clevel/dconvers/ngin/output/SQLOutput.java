package com.clevel.dconvers.ngin.output;

import com.clevel.dconvers.Application;
import com.clevel.dconvers.conf.DataConversionConfigFile;
import com.clevel.dconvers.conf.OutputConfig;
import com.clevel.dconvers.conf.SystemVariable;
import com.clevel.dconvers.ngin.Source;
import com.clevel.dconvers.ngin.Target;
import com.clevel.dconvers.ngin.data.DataTable;
import com.clevel.dconvers.ngin.format.DataFormatter;
import com.clevel.dconvers.ngin.format.SQLCreateFormatter;
import com.clevel.dconvers.ngin.format.SQLInsertFormatter;
import com.clevel.dconvers.ngin.format.SQLUpdateFormatter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

public class SQLOutput extends Output {

    public SQLOutput(Application application, String name) {
        super(application, name);
    }

    @Override
    protected List<DataFormatter> getFormatterList(OutputConfig outputConfig, DataTable dataTable) {
        List<DataFormatter> dataFormatterList = new ArrayList<>();
        String tableName = outputConfig.getSqlTable();
        String nameQuotes = outputConfig.getSqlNameQuotes();
        String valueQuotes = outputConfig.getSqlValueQuotes();

        if (outputConfig.isSqlCreate()) {
            dataFormatterList.add(new SQLCreateFormatter(application, tableName, nameQuotes, outputConfig.isSqlInsert() && outputConfig.isSqlUpdate()));
        }
        if (outputConfig.isSqlInsert()) dataFormatterList.add(new SQLInsertFormatter(application, tableName, nameQuotes, valueQuotes));
        if (outputConfig.isSqlUpdate()) dataFormatterList.add(new SQLUpdateFormatter(application, tableName, nameQuotes, valueQuotes));

        return dataFormatterList;
    }

    @Override
    protected Writer openWriter(OutputConfig outputConfig, DataTable dataTable) {
        DataConversionConfigFile dataConversionConfigFile = application.dataConversionConfigFile;
        String outputPath;
        String headPrint = null;
        Object owner = dataTable.getOwner();

        if (owner instanceof Source) {
            Source source = (Source) owner;
            outputPath = dataConversionConfigFile.getOutputSourcePath();
            headPrint = "--\n"
                    + "-- Generated by dconvers at " + application.getSystemVariableValue(SystemVariable.NOW) + ".\n"
                    + "-- This sql file contains " + dataTable.getRowCount() + " rows from source(" + source.getName() + ") in converter(" + name + ")\n"
                    + "-- Data from : " + dataTable.getQuery() + "\n"
                    + "--\n";
        } else if (owner instanceof Target) {
            Target target = (Target) owner;
            outputPath = dataConversionConfigFile.getOutputTargetPath();
            headPrint = "--\n"
                    + "-- Generated by dconvers at " + application.getSystemVariableValue(SystemVariable.NOW) + ".\n"
                    + "-- This sql file contains " + dataTable.getRowCount() + " rows from target(" + target.getName() + ") in converter(" + name + ")\n"
                    + "-- Data from : source(" + target.getTargetConfig().getSource() + ")\n"
                    + "--\n";
        } else {
            outputPath = dataConversionConfigFile.getOutputMappingPath();
            headPrint = "";
        }

        String sqlOutputFilename = outputPath + outputConfig.getSqlOutput();
        Writer writer = createFile(sqlOutputFilename, outputConfig.isSqlOutputAutoCreateDir(), outputConfig.isSqlOutputAppend(), outputConfig.getSqlOutputCharset());
        if (headPrint != null && writer != null) {
            try {
                writer.write(headPrint);
            } catch (IOException e) {
                log.error("SQLOutput: write the head print failed, {}", e.getMessage());
                return null;
            }
        }
        registerPostSFTP(sqlOutputFilename, outputConfig.getSqlSftpOutput(), outputConfig.getSqlSftp());

        List<String> preSQL = outputConfig.getSqlPreSQL();
        if (preSQL.size() > 0) {
            try {
                for (String sql : preSQL) {
                    writer.write(sql + "\n");
                }
            } catch (IOException e) {
                log.error("SQLOutput: write the pre-sql failed, {}", e.getMessage());
                return null;
            }
        }

        return writer;
    }

    @Override
    protected boolean closeWriter(OutputConfig outputConfig, DataTable dataTable, Writer writer, boolean success) {

        if (!success) {
            return false;
        }

        List<String> postSQL = outputConfig.getSqlPostSQL();
        if (postSQL.size() > 0) {
            try {
                for (String sql : postSQL) {
                    writer.write(sql + "\n");
                }
            } catch (IOException e) {
                log.error("SQLOutput: write the post-sql failed, {}", e.getMessage());
                success = false;
            }
        }

        try {
            writer.close();
        } catch (IOException e) {
            // do nothing
        }

        return success;
    }

    @Override
    protected Logger loadLogger() {
        return LoggerFactory.getLogger(SQLOutput.class);
    }

}
